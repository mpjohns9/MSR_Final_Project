#!/usr/bin/env python

import rospy
from visualization_msgs.msg import MarkerArray, Marker
from generate.generate_maze import MazeGeneration
from gazebo_msgs.srv import SpawnModel
from geometry_msgs.msg import Pose
import numpy as np

class Maze:

    def __init__(self):
        self.marker_pub = rospy.Publisher('maze_markers', Marker, queue_size=100)
        self.spawn_model = rospy.ServiceProxy('gazebo/spawn_sdf_model', SpawnModel)
        self.difficulty = rospy.get_param('~difficulty')
        self.markers = []
        self.ma = MarkerArray()
        self.r = rospy.Rate(0.001)

        with open('/home/mpjohns/cdir/FinalProject/ws/src/final_project/maze_gen/config/wall.sdf', 'r') as f:
            self.wall_xml = f.read()

        rospy.wait_for_service("gazebo/spawn_sdf_model")

    def create_markers(self):
        mg = MazeGeneration()
        m = mg.generate_maze(self.difficulty)

        m[4][4] = 4

        end_found = False
        row = -3
        while not end_found:
            if 2 in m[row]:
                idx = np.where(m == 2)[0]
                if len(idx) > 1:
                    m[row][idx[-1] - 3] = 5
                else:
                    m[row][idx] = 5
                end_found = True
            row -= 1

        id = 0
        # print('Maze:',m)
        for y, row in enumerate(m):
            # print('Row:',row)
            for x, c in enumerate(row):
                # print('Cell:', c)
                if c in (1, 4, 5):

                    marker = Marker()
                    marker.header.frame_id = 'map'
                    marker.id = id
                    marker.action = marker.ADD
                    marker.scale.x = 0.2
                    marker.scale.y = 0.2
                    marker.scale.z = 0.1

                    if c == 1:
                        marker.type = marker.CUBE
                        marker.color.r = 1.0
                        marker.color.g = 0.0
                        marker.color.b = 0.0
                        marker.color.a = 1.0
                    elif c == 4:
                        marker.type = marker.SPHERE
                        marker.color.r = 0.0
                        marker.color.g = 1.0
                        marker.color.b = 0.0
                        marker.color.a = 1.0
                    else:
                        marker.type = marker.SPHERE
                        marker.color.r = 0.0
                        marker.color.g = 0.0
                        marker.color.b = 1.0
                        marker.color.a = 1.0


                    p = Pose()

                    p.orientation.w = 1.0
                    p.position.x = x/(len(m)/5) - 2.5
                    p.position.y = y/(len(m)/5) - 2.5
                    p.position.z = 0

                    marker.pose = p

                    self.markers.append(marker)
                    # rospy.logerr('MARKER')
                    # rospy.logerr(marker)
                    # rospy.logerr('__________________________________')
                    self.marker_pub.publish(marker)
                    self.spawn_model(f'wall{id}', self.wall_xml, '', p, 'world')
                    id += 1



        # self.ma.markers = self.markers

        # id = 0
        # for m in self.ma.markers:
        #     m.id = id
        #     id += 1
            # rospy.logerr(m)

def main():
    rospy.init_node('maze')
    maze = Maze()
    # maze.create_markers()
    while not rospy.is_shutdown():
        maze.create_markers()
        # rospy.logerr(maze.markers)
        # maze.marker_pub.publish(maze.ma)
        maze.r.sleep()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass

